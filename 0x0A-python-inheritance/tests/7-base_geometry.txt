The ``7-base_geometry`` module
========================

7-base_geometry module defines a class "MyList" that inherits from builtin "list"
==========================================================================

USAGE
------------------------
CASE 1 :: Class instantiation:

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

	>>> bg = BaseGeometry()

CASE :: Positive integer > 0

	>>> bg.integer_validator("my_int", 12)
	>>> bg.integer_validator("width", 89)

CASE :: Non Integer Value

	>>> try:
	...     bg.integer_validator("name", "John")
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] name must be an integer

CASE :: Integer Value equal 0

	>>> try:
	...     bg.integer_validator("age", 0)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[ValueError] age must be greater than 0

CASE :: Integer Value less than 0

	>>> try:
	...     bg.integer_validator("distance", -4)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[ValueError] distance must be greater than 0
	>>> try:
	...     bg.integer_validator("distance", [4])
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] distance must be an integer
	>>> try:
	...     bg.integer_validator("distance", (56))
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	>>> try:
	...     bg.integer_validator()
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'
	>>> try:
	...     bg.area()
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[Exception] area() is not implemented
	>>> try:
	...     bg.integer_validator("distance", None)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] distance must be an integer
	>>> try:
	...     bg.integer_validator("distance", False)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] distance must be an integer
	>>> try:
	...     bg.integer_validator("name", [2, 3])
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] name must be an integer
	>>> try:
	...     bg.integer_validator("name", (2, 3))
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] name must be an integer
	>>> try:
	...     bg.integer_validator("name", {9, 3})
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] name must be an integer
